{"remainingRequest":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/src/views/curso/Tema1.vue?vue&type=template&id=ace4d02e&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/src/views/curso/Tema1.vue","mtime":1740342191046},{"path":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Constitucion_y_Democracia/U3_Constitucion_y_Democracia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}